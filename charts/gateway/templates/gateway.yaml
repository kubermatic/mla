---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mla-gateway
data:
  nginx.conf: |
    worker_processes  1;
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  1024;
    }

    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;

      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
      access_log   /dev/stderr  main;
      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local;

      # write path - exposed to user clusters
      server {
        listen             8080;
        proxy_set_header X-Scope-OrgID {{ .Values.mla.tenantID }};
        proxy_set_header THANOS-TENANT {{ .Values.mla.tenantID }};


        location = /api/prom/push {
          proxy_pass       http://loki-distributed-distributor.{{ .Values.mla.namespace }}.svc.cluster.local:3100$request_uri;
        }

        location = /api/v1/receive {
          proxy_pass       http://thanos-receive.{{ .Values.mla.namespace }}.svc.cluster.local:19291$request_uri;
        }

        location = /loki/api/v1/push {
          proxy_pass       http://loki-distributed-distributor.{{ .Values.mla.namespace }}.svc.cluster.local:3100$request_uri;
        }
      }

      # read path - cluster-local access only
      server {
        listen             8081;
        proxy_set_header   X-Scope-OrgID {{ .Values.mla.tenantID }};

        # k8s probes
        location = / {
          return 200 'OK';
          auth_basic off;
        }

        # location = /api/prom/tail {
        #   proxy_pass       http://loki-distributed-querier.{{ .Values.mla.namespace }}.svc.cluster.local:3100$request_uri;
        #   proxy_set_header Upgrade $http_upgrade;
        #   proxy_set_header Connection "upgrade";
        # }

        location ~ /api/prom/.* {
          proxy_pass       http://loki-distributed-query-frontend.{{ .Values.mla.namespace }}.svc.cluster.local:3100$request_uri;
        }

        # location = /loki/api/v1/tail {
        #   proxy_pass       http://loki-distributed-querier.{{ .Values.mla.namespace }}.svc.cluster.local:3100$request_uri;
        #   proxy_set_header Upgrade $http_upgrade;
        #   proxy_set_header Connection "upgrade";
        # }

        location ~ /loki/api/.* {
          proxy_pass       http://loki-distributed-query-frontend.{{ .Values.mla.namespace }}.svc.cluster.local:3100$request_uri;
        }

        location ~ /api/v1/query {
          set $args $args&tenant_id={{ .Values.mla.tenantID }};
          proxy_pass       http://prom-label-proxy.{{ .Values.mla.namespace }}.svc.cluster.local$uri$is_args$args;
        }

        location ~ /api/v1/.* {
          proxy_pass       http://thanos-query-frontend.{{ .Values.mla.namespace }}.svc.cluster.local:9090$request_uri;
        }
      }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: mla-gateway-ext
spec:
  type: LoadBalancer
  ports:
    - name: http-ext
      port: 80
      targetPort: http-ext
      protocol: TCP
  selector:
    app.kubernetes.io/name: mla
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: cluster-xyz

---
apiVersion: v1
kind: Service
metadata:
  name: mla-gateway
spec:
  type: ClusterIP
  ports:
    - name: http-int
      port: 80
      targetPort: http-int
      protocol: TCP
  selector:
    app.kubernetes.io/name: mla
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: cluster-xyz

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mla-gateway
  labels:
    app.kubernetes.io/name: mla
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: cluster-xyz
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: mla
      app.kubernetes.io/component: gateway
      app.kubernetes.io/instance: cluster-xyz
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mla
        app.kubernetes.io/component: gateway
        app.kubernetes.io/instance: cluster-xyz
    spec:
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      terminationGracePeriodSeconds: 30
      containers:
        - name: nginx
          image: docker.io/nginxinc/nginx-unprivileged:1.19-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-ext
              containerPort: 8080
              protocol: TCP
            - name: http-int
              containerPort: 8081
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http-int
            initialDelaySeconds: 15
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: http-int
            periodSeconds: 10
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config
              mountPath: /etc/nginx
            - name: tmp
              mountPath: /tmp
            - name: docker-entrypoint-d-override
              mountPath: /docker-entrypoint.d
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: mla-gateway
        - name: tmp
          emptyDir: {}
        - name: docker-entrypoint-d-override
          emptyDir: {}
